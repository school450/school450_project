let allIdeas = []; // —Ö—Ä–∞–Ω–∏–º –≤—Å–µ –∏–¥–µ–∏

document.addEventListener("DOMContentLoaded", () => {
    fetchIdeas();

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const categoryFilter = document.getElementById("categoryFilter");
    const sortBy = document.getElementById("sortBy");

    if (categoryFilter) {
        categoryFilter.addEventListener("change", renderIdeas);
    }
    if (sortBy) {
        sortBy.addEventListener("change", renderIdeas);
    }
});

async function fetchIdeas() {
    try {
        const response = await fetch("/ideas");
        const ideas = await response.json();
        allIdeas = ideas; // —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
        renderIdeas(); // –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∏
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–µ–π:", error);
    }
}

function renderIdeas() {
    const ideasList = document.getElementById("ideasList");
    const categoryFilter = document.getElementById("categoryFilter")?.value || "all";
    const sortBy = document.getElementById("sortBy")?.value || "date";

    let filtered = [...allIdeas];

    // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (categoryFilter !== "all") {
        filtered = filtered.filter(idea => idea.category === categoryFilter);
    }

    // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (sortBy === "date") {
        filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    } else if (sortBy === "count") {
        filtered.sort((a, b) => (b.count || 1) - (a.count || 1));
    } else if (sortBy === "category") {
        filtered.sort((a, b) => a.category.localeCompare(b.category));
    }

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    ideasList.innerHTML = "";

    if (filtered.length === 0) {
        ideasList.innerHTML = "<p>–ù–µ—Ç –∑–∞—è–≤–æ–∫</p>";
        return;
    }

    filtered.forEach(idea => {
        const ideaElement = document.createElement("div");
        ideaElement.classList.add("idea-card");

        let color;
        switch (idea.status) {
            case "–Ω–æ–≤–∞—è": color = "#b3d9ff"; break;
            case "–≤ —Ä–∞–±–æ—Ç–µ": color = "#ffcc66"; break;
            case "–æ–¥–æ–±—Ä–µ–Ω–æ": color = "#99ff99"; break;
            case "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ": color = "#ff9999"; break;
        }
        ideaElement.style.backgroundColor = color;

        ideaElement.innerHTML = `
            <div class="idea-content">
                <p class="idea-text">${idea.idea} ${idea.count > 1 ? `(√ó${idea.count})` : ""}</p>
                <p class="idea-date">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${idea.category} <br>
                    ${new Date(idea.created_at).toLocaleString()}
                </p>
            </div>
            <select class="select-status" onchange="updateStatus(${idea.id}, this.value)">
                <option value="–Ω–æ–≤–∞—è" ${idea.status === "–Ω–æ–≤–∞—è" ? "selected" : ""}>–ù–æ–≤–∞—è</option>
                <option value="–≤ —Ä–∞–±–æ—Ç–µ" ${idea.status === "–≤ —Ä–∞–±–æ—Ç–µ" ? "selected" : ""}>–í —Ä–∞–±–æ—Ç–µ</option>
                <option value="–æ–¥–æ–±—Ä–µ–Ω–æ" ${idea.status === "–æ–¥–æ–±—Ä–µ–Ω–æ" ? "selected" : ""}>–û–¥–æ–±—Ä–µ–Ω–æ</option>
                <option value="–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" ${idea.status === "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" ? "selected" : ""}>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</option>
            </select>
            <button onclick="deleteIdea(${idea.id})">üóë –£–¥–∞–ª–∏—Ç—å</button>
        `;

        ideasList.appendChild(ideaElement);
    });
}

async function deleteIdea(id) {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?")) return;

    try {
        const response = await fetch(`/ideas/${id}`, {
            method: "DELETE",
            headers: { "Authorization": `Bearer ${localStorage.getItem("adminToken")}` }
        });

        if (response.ok) {
            fetchIdeas();
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
    }
}

async function updateStatus(id, newStatus) {
    try {
        await fetch(`/ideas/${id}/status`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${localStorage.getItem("adminToken")}`
            },
            body: JSON.stringify({ status: newStatus })
        });

        fetchIdeas();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
    }
}

async function loginAdmin() {
    const code = document.getElementById('adminCode').value;
    try {
        const response = await fetch("/admin/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ code })
        });
        const result = await response.json();
        if (response.ok) {
            localStorage.setItem("adminToken", result.token);
            document.getElementById('adminSection').style.display = 'block';
            fetchIdeas();
        } else {
            alert(result.error);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    }
}